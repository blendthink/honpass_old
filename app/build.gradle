apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "dev.honwaka_lab.honpass"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                             "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    packagingOptions {
        exclude 'META-INF/spring.tooling'
        exclude 'META-INF/spring.handlers'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/spring.schemas'
        exclude 'META-INF/notice.txt'
    }
    dataBinding {
        enabled = true
    }
}

configurations {
    ktlint
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "androidx.core:core-ktx:${versions.coreKtx}"
    implementation "androidx.annotation:annotation:${versions.annotation}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"

    // Material
    implementation "com.google.android.material:material:${versions.material}"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"

    // Room
    implementation "androidx.room:room-runtime:${versions.room}"
    kapt "androidx.room:room-compiler:${versions.room}"
    implementation "androidx.room:room-ktx:${versions.room}"
    implementation "androidx.room:room-guava:${versions.room}"
    testImplementation "androidx.room:room-testing:${versions.room}"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    // Koin
    implementation "org.koin:koin-androidx-scope:${versions.koin}"
    implementation "org.koin:koin-androidx-viewmodel:${versions.koin}"
    implementation "org.koin:koin-androidx-ext:${versions.koin}"

    // Spring Security
    implementation "org.springframework.security:spring-security-core:${versions.springSecurityCore}"

    // Test
    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation "androidx.test:runner:${versions.runner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espressoCore}"

    // Lint
    ktlint "com.pinterest:ktlint:${versions.ktlint}"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}
